"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global globalRootUrl, ConferenceRoomsAPI, Extensions, globalTranslate, UserMessage */

/**
 * Module handling interactions with the conference room table.
 * @module conferenceTable
 */
var conferenceTable = {
  $conferencesTable: $('#conference-rooms-table'),

  /**
   * Initializes module functionality.
   * Specifically, it adds a double click event handler to the rows of the conference table.
   */
  initialize: function initialize() {
    // Attach double-click event handler to each cell in the conference room table
    // The handler redirects to a URL specific to the conference room for editing
    $('.record-row td').on('dblclick', function (e) {
      var id = $(e.target).closest('tr').attr('id');
      window.location = "".concat(globalRootUrl, "conference-rooms/modify/").concat(id);
    }); // Set up delete functionality on delete button click.

    $('body').on('click', 'a.delete', function (e) {
      e.preventDefault();
      $(e.target).addClass('disabled'); // Get the conference room  ID from the closest table row.

      var rowId = $(e.target).closest('tr').attr('id'); // Remove any previous AJAX messages.

      $('.message.ajax').remove(); // Call the PbxApi method to delete the conference room record.

      ConferenceRoomsAPI.deleteRecord(rowId, conferenceTable.cbAfterDeleteRecord);
    });
  },

  /**
   * Callback function executed after deleting a record.
   * @param {Object} response - The response object from the API.
   */
  cbAfterDeleteRecord: function cbAfterDeleteRecord(response) {
    if (response.result === true) {
      // Remove the deleted record's table row.
      conferenceTable.$conferencesTable.find("tr[id=".concat(response.data.id, "]")).remove(); // Call the callback function for data change.

      Extensions.cbOnDataChanged();
    } else {
      // Show an error message if deletion was not successful.
      UserMessage.showError(response.messages.error, globalTranslate.cr_ImpossibleToDeleteConferenceRoom);
    }

    $('a.delete').removeClass('disabled');
  }
};
/**
 *  Initialize conference rooms table on document ready
 */

$(document).ready(function () {
  conferenceTable.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db25mZXJlbmNlUm9vbXMvY29uZmVyZW5jZS1yb29tcy1pbmRleC5qcyJdLCJuYW1lcyI6WyJjb25mZXJlbmNlVGFibGUiLCIkY29uZmVyZW5jZXNUYWJsZSIsIiQiLCJpbml0aWFsaXplIiwib24iLCJlIiwiaWQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiYXR0ciIsIndpbmRvdyIsImxvY2F0aW9uIiwiZ2xvYmFsUm9vdFVybCIsInByZXZlbnREZWZhdWx0IiwiYWRkQ2xhc3MiLCJyb3dJZCIsInJlbW92ZSIsIkNvbmZlcmVuY2VSb29tc0FQSSIsImRlbGV0ZVJlY29yZCIsImNiQWZ0ZXJEZWxldGVSZWNvcmQiLCJyZXNwb25zZSIsInJlc3VsdCIsImZpbmQiLCJkYXRhIiwiRXh0ZW5zaW9ucyIsImNiT25EYXRhQ2hhbmdlZCIsIlVzZXJNZXNzYWdlIiwic2hvd0Vycm9yIiwibWVzc2FnZXMiLCJlcnJvciIsImdsb2JhbFRyYW5zbGF0ZSIsImNyX0ltcG9zc2libGVUb0RlbGV0ZUNvbmZlcmVuY2VSb29tIiwicmVtb3ZlQ2xhc3MiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxlQUFlLEdBQUc7QUFFcEJDLEVBQUFBLGlCQUFpQixFQUFFQyxDQUFDLENBQUMseUJBQUQsQ0FGQTs7QUFJcEI7QUFDSjtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsVUFSb0Isd0JBUVA7QUFFVDtBQUNBO0FBQ0FELElBQUFBLENBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CRSxFQUFwQixDQUF1QixVQUF2QixFQUFtQyxVQUFDQyxDQUFELEVBQU87QUFDdEMsVUFBTUMsRUFBRSxHQUFHSixDQUFDLENBQUNHLENBQUMsQ0FBQ0UsTUFBSCxDQUFELENBQVlDLE9BQVosQ0FBb0IsSUFBcEIsRUFBMEJDLElBQTFCLENBQStCLElBQS9CLENBQVg7QUFDQUMsTUFBQUEsTUFBTSxDQUFDQyxRQUFQLGFBQXFCQyxhQUFyQixxQ0FBNkROLEVBQTdEO0FBQ0gsS0FIRCxFQUpTLENBU1Q7O0FBQ0FKLElBQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVUUsRUFBVixDQUFhLE9BQWIsRUFBc0IsVUFBdEIsRUFBa0MsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3JDQSxNQUFBQSxDQUFDLENBQUNRLGNBQUY7QUFDQVgsTUFBQUEsQ0FBQyxDQUFDRyxDQUFDLENBQUNFLE1BQUgsQ0FBRCxDQUFZTyxRQUFaLENBQXFCLFVBQXJCLEVBRnFDLENBR3JDOztBQUNBLFVBQU1DLEtBQUssR0FBR2IsQ0FBQyxDQUFDRyxDQUFDLENBQUNFLE1BQUgsQ0FBRCxDQUFZQyxPQUFaLENBQW9CLElBQXBCLEVBQTBCQyxJQUExQixDQUErQixJQUEvQixDQUFkLENBSnFDLENBTXJDOztBQUNBUCxNQUFBQSxDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CYyxNQUFuQixHQVBxQyxDQVNyQzs7QUFDQUMsTUFBQUEsa0JBQWtCLENBQUNDLFlBQW5CLENBQWdDSCxLQUFoQyxFQUF1Q2YsZUFBZSxDQUFDbUIsbUJBQXZEO0FBQ0gsS0FYRDtBQVlILEdBOUJtQjs7QUFnQ3BCO0FBQ0o7QUFDQTtBQUNBO0FBQ0lBLEVBQUFBLG1CQXBDb0IsK0JBb0NBQyxRQXBDQSxFQW9DUztBQUN6QixRQUFJQSxRQUFRLENBQUNDLE1BQVQsS0FBb0IsSUFBeEIsRUFBOEI7QUFDMUI7QUFDQXJCLE1BQUFBLGVBQWUsQ0FBQ0MsaUJBQWhCLENBQWtDcUIsSUFBbEMsaUJBQWdERixRQUFRLENBQUNHLElBQVQsQ0FBY2pCLEVBQTlELFFBQXFFVSxNQUFyRSxHQUYwQixDQUcxQjs7QUFDQVEsTUFBQUEsVUFBVSxDQUFDQyxlQUFYO0FBQ0gsS0FMRCxNQUtPO0FBQ0g7QUFDQUMsTUFBQUEsV0FBVyxDQUFDQyxTQUFaLENBQXNCUCxRQUFRLENBQUNRLFFBQVQsQ0FBa0JDLEtBQXhDLEVBQStDQyxlQUFlLENBQUNDLG1DQUEvRDtBQUNIOztBQUNEN0IsSUFBQUEsQ0FBQyxDQUFDLFVBQUQsQ0FBRCxDQUFjOEIsV0FBZCxDQUEwQixVQUExQjtBQUNIO0FBL0NtQixDQUF4QjtBQWtEQTtBQUNBO0FBQ0E7O0FBQ0E5QixDQUFDLENBQUMrQixRQUFELENBQUQsQ0FBWUMsS0FBWixDQUFrQixZQUFNO0FBQ3BCbEMsRUFBQUEsZUFBZSxDQUFDRyxVQUFoQjtBQUNILENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IMKpIDIwMTctMjAyMyBBbGV4ZXkgUG9ydG5vdiBhbmQgTmlrb2xheSBCZWtldG92XG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLlxuICogSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyogZ2xvYmFsIGdsb2JhbFJvb3RVcmwsIENvbmZlcmVuY2VSb29tc0FQSSwgRXh0ZW5zaW9ucywgZ2xvYmFsVHJhbnNsYXRlLCBVc2VyTWVzc2FnZSAqL1xuXG4vKipcbiAqIE1vZHVsZSBoYW5kbGluZyBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgY29uZmVyZW5jZSByb29tIHRhYmxlLlxuICogQG1vZHVsZSBjb25mZXJlbmNlVGFibGVcbiAqL1xuY29uc3QgY29uZmVyZW5jZVRhYmxlID0ge1xuXG4gICAgJGNvbmZlcmVuY2VzVGFibGU6ICQoJyNjb25mZXJlbmNlLXJvb21zLXRhYmxlJyksXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBtb2R1bGUgZnVuY3Rpb25hbGl0eS5cbiAgICAgKiBTcGVjaWZpY2FsbHksIGl0IGFkZHMgYSBkb3VibGUgY2xpY2sgZXZlbnQgaGFuZGxlciB0byB0aGUgcm93cyBvZiB0aGUgY29uZmVyZW5jZSB0YWJsZS5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuXG4gICAgICAgIC8vIEF0dGFjaCBkb3VibGUtY2xpY2sgZXZlbnQgaGFuZGxlciB0byBlYWNoIGNlbGwgaW4gdGhlIGNvbmZlcmVuY2Ugcm9vbSB0YWJsZVxuICAgICAgICAvLyBUaGUgaGFuZGxlciByZWRpcmVjdHMgdG8gYSBVUkwgc3BlY2lmaWMgdG8gdGhlIGNvbmZlcmVuY2Ugcm9vbSBmb3IgZWRpdGluZ1xuICAgICAgICAkKCcucmVjb3JkLXJvdyB0ZCcpLm9uKCdkYmxjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ3RyJykuYXR0cignaWQnKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAke2dsb2JhbFJvb3RVcmx9Y29uZmVyZW5jZS1yb29tcy9tb2RpZnkvJHtpZH1gO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTZXQgdXAgZGVsZXRlIGZ1bmN0aW9uYWxpdHkgb24gZGVsZXRlIGJ1dHRvbiBjbGljay5cbiAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICdhLmRlbGV0ZScsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkKGUudGFyZ2V0KS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29uZmVyZW5jZSByb29tICBJRCBmcm9tIHRoZSBjbG9zZXN0IHRhYmxlIHJvdy5cbiAgICAgICAgICAgIGNvbnN0IHJvd0lkID0gJChlLnRhcmdldCkuY2xvc2VzdCgndHInKS5hdHRyKCdpZCcpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IHByZXZpb3VzIEFKQVggbWVzc2FnZXMuXG4gICAgICAgICAgICAkKCcubWVzc2FnZS5hamF4JykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIFBieEFwaSBtZXRob2QgdG8gZGVsZXRlIHRoZSBjb25mZXJlbmNlIHJvb20gcmVjb3JkLlxuICAgICAgICAgICAgQ29uZmVyZW5jZVJvb21zQVBJLmRlbGV0ZVJlY29yZChyb3dJZCwgY29uZmVyZW5jZVRhYmxlLmNiQWZ0ZXJEZWxldGVSZWNvcmQpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZXhlY3V0ZWQgYWZ0ZXIgZGVsZXRpbmcgYSByZWNvcmQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIC0gVGhlIHJlc3BvbnNlIG9iamVjdCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgY2JBZnRlckRlbGV0ZVJlY29yZChyZXNwb25zZSl7XG4gICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZGVsZXRlZCByZWNvcmQncyB0YWJsZSByb3cuXG4gICAgICAgICAgICBjb25mZXJlbmNlVGFibGUuJGNvbmZlcmVuY2VzVGFibGUuZmluZChgdHJbaWQ9JHtyZXNwb25zZS5kYXRhLmlkfV1gKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBkYXRhIGNoYW5nZS5cbiAgICAgICAgICAgIEV4dGVuc2lvbnMuY2JPbkRhdGFDaGFuZ2VkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTaG93IGFuIGVycm9yIG1lc3NhZ2UgaWYgZGVsZXRpb24gd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAgICAgICAgICAgVXNlck1lc3NhZ2Uuc2hvd0Vycm9yKHJlc3BvbnNlLm1lc3NhZ2VzLmVycm9yLCBnbG9iYWxUcmFuc2xhdGUuY3JfSW1wb3NzaWJsZVRvRGVsZXRlQ29uZmVyZW5jZVJvb20pO1xuICAgICAgICB9XG4gICAgICAgICQoJ2EuZGVsZXRlJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgfSxcbn07XG5cbi8qKlxuICogIEluaXRpYWxpemUgY29uZmVyZW5jZSByb29tcyB0YWJsZSBvbiBkb2N1bWVudCByZWFkeVxuICovXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gICAgY29uZmVyZW5jZVRhYmxlLmluaXRpYWxpemUoKTtcbn0pO1xuXG4iXX0=