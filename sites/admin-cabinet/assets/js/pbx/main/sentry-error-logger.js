"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright Â© 2017-2023 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global Sentry, globalPBXVersion, globalPBXLicense,
globalLastSentryEventId, globalTranslate, localStorage */

/**
 * Shows the Sentry report dialog for error reporting.
 * @param {string} hash - Hash value for identifying the error.
 * @param {string} sentryEventId - Sentry event ID for the error.
 */
function globalShowSentryReportDialog(hash, sentryEventId) {
  var itIsKnownError = localStorage.getItem("sentry_lastError".concat(hash));

  if (itIsKnownError === null) {
    if (typeof {
      globalTranslate: globalTranslate
    } !== "undefined" && Object.keys(globalTranslate).length > 0) {
      Sentry.showReportDialog({
        eventId: sentryEventId,
        title: globalTranslate.sntry_Title,
        subtitle: globalTranslate.sntry_Subtitle,
        subtitle2: globalTranslate.sntry_Subtitle2,
        labelComments: globalTranslate.sntry_LabelComments,
        labelClose: globalTranslate.sntry_LabelClose,
        labelSubmit: globalTranslate.sntry_LabelSubmit,
        errorGeneric: globalTranslate.sntry_ErrorGeneric,
        errorFormEntry: globalTranslate.sntry_ErrorFormEntry,
        successMessage: globalTranslate.sntry_SuccessMessage
      });
    } else {
      Sentry.showReportDialog({
        eventId: sentryEventId
      });
    }

    localStorage.setItem("sentry_lastError".concat(hash), 'theFormHasAlreadySent');
  }
}

Sentry.onLoad(function () {
  Sentry.init({
    dsn: 'https://07be0eff8a5c463fbac3e90ae5c7d039@sentry.miko.ru/1',
    release: "mikopbx@".concat(globalPBXVersion),
    beforeSend: function beforeSend(event, hint) {
      // Check if it is an exception, and if so, show the report dialog
      if (event.exception) {
        var error = hint.originalException;

        if (error && error.message && error.message.length > 0) {
          // Log the error message to the console
          console.error("Captured error:", error); // Generate a hash from the error message

          var s = error.message;
          var hash = 0;
          var i;
          var chr;

          for (i = 0; i < s.length; i++) {
            chr = s.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0; // Convert to 32bit integer
          } // Show the Sentry report dialog


          globalShowSentryReportDialog(hash, hint.eventId);
        }
      } // Return the event for Sentry to process


      return event;
    }
  });
  Sentry.configureScope(function (scope) {
    scope.setUser({
      id: globalPBXLicense
    });
    scope.setTag('library', 'web-interface');
  });

  if (globalLastSentryEventId) {
    globalShowSentryReportDialog(globalLastSentryEventId);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,